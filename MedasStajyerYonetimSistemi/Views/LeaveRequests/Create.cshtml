@model MedasStajyerYonetimSistemi.Models.LeaveRequest

@{
    ViewData["Title"] = "Yeni İzin Talebi";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-calendar-plus"></i> Yeni İzin Talebi</h3>
            </div>
            <div class="card-body">
                <form asp-action="Create" method="post" id="leaveForm">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="InternId" class="form-label">
                                    Stajyer <span class="text-danger">*</span>
                                </label>
                                <select asp-for="InternId" class="form-select" asp-items="ViewBag.InternId">
                                    <option value="">-- Stajyer Seçin --</option>
                                </select>
                                <span asp-validation-for="InternId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="LeaveType" class="form-label">
                                    İzin Türü <span class="text-danger">*</span>
                                </label>
                                <select asp-for="LeaveType" class="form-select" asp-items="ViewBag.LeaveTypes">
                                    <option value="">-- İzin Türü Seçin --</option>
                                </select>
                                <span asp-validation-for="LeaveType" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="StartDateTime" class="form-label">
                                    Çıkması Gereken Tarih/Saat <span class="text-danger">*</span>
                                </label>
                                <input asp-for="StartDateTime" type="datetime-local" class="form-control" id="startDateTime" />
                                <span asp-validation-for="StartDateTime" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="EndDateTime" class="form-label">
                                    Dönmesi Gereken Tarih/Saat <span class="text-danger">*</span>
                                </label>
                                <input asp-for="EndDateTime" type="datetime-local" class="form-control" id="endDateTime" />
                                <span asp-validation-for="EndDateTime" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Toplam Gün Sayısı</label>
                                <input type="text" class="form-control" id="totalDays" readonly
                                       placeholder="Tarih seçildikten sonra hesaplanacak" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Toplam Saat</label>
                                <input type="text" class="form-control" id="totalHours" readonly
                                       placeholder="Tarih seçildikten sonra hesaplanacak" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Reason" class="form-label">İzin/Görev Sebebi</label>
                        <textarea asp-for="Reason" class="form-control" rows="4"
                                  placeholder="İzin talebinizle ilgili açıklama yazabilirsiniz..."></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                        <div class="form-text">Maksimum 500 karakter</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input asp-for="IsManualEntry" class="form-check-input" type="checkbox" />
                                <label asp-for="IsManualEntry" class="form-check-label">
                                    Manuel Form
                                </label>
                                <div class="form-text">Manuel olarak girilen izin talepleri için işaretleyin</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" asp-for="ShouldReflectToTimesheet" checked="checked" />
                                <label class="form-check-label" asp-for="ShouldReflectToTimesheet">
                                    Puantaja Yansıt
                                </label>
                                <small class="form-text text-muted">
                                    İzin onaylandığında otomatik olarak puantaja yansıtılsın mı?
                                </small>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle"></i> İzin Hesaplama Kuralları</h6>
                        <ul class="mb-0">
                            <li><strong>Çalışma Saatleri:</strong> 08:30-17:30 arası hesaplanır</li>
                            <li><strong>Dönüş Tarihi:</strong> İş başı yapacağınız gün ve saat</li>
                            <li><strong>Örnek:</strong> Pazartesi 09:00'dan Salı 14:00'e = Pazartesi 8.5h + Salı 5.5h</li>
                            <li><strong>Not:</strong> İzin talebiniz oluşturulduktan sonra sorumlu kişi tarafından onaylanacaktır</li>
                        </ul>
                    </div>

                    <div class="d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Geri
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> İzin Talebini Oluştur
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startDateTimeInput = document.getElementById('startDateTime');
            const endDateTimeInput = document.getElementById('endDateTime');
            const totalDaysInput = document.getElementById('totalDays');
            const totalHoursInput = document.getElementById('totalHours');

            // Şu anki tarih ve saati minimum tarih olarak ayarla
            const now = new Date();
            const nowString = now.toISOString().slice(0, 16);
            startDateTimeInput.min = nowString;
            endDateTimeInput.min = nowString;

            function calculateTotals() {
                if (startDateTimeInput.value && endDateTimeInput.value) {
                    const startDate = new Date(startDateTimeInput.value);
                    const endDate = new Date(endDateTimeInput.value);

                    if (endDate >= startDate) {
                        const timeDiff = endDate.getTime() - startDate.getTime();
                        const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
                        const hourDiff = (timeDiff / (1000 * 3600)).toFixed(2);

                        totalDaysInput.value = dayDiff + ' gün';
                        totalHoursInput.value = hourDiff + ' saat';
                        totalDaysInput.className = 'form-control text-success fw-bold';
                        totalHoursInput.className = 'form-control text-success fw-bold';
                    } else {
                        totalDaysInput.value = 'Geçersiz tarih aralığı';
                        totalHoursInput.value = 'Geçersiz tarih aralığı';
                        totalDaysInput.className = 'form-control text-danger';
                        totalHoursInput.className = 'form-control text-danger';
                    }
                } else {
                    totalDaysInput.value = '';
                    totalHoursInput.value = '';
                    totalDaysInput.className = 'form-control';
                    totalHoursInput.className = 'form-control';
                }
            }

            startDateTimeInput.addEventListener('change', function() {
                // Başlangıç tarihi değiştiğinde bitiş tarihinin minimum değerini güncelle
                endDateTimeInput.min = this.value;
                calculateTotals();
            });

            endDateTimeInput.addEventListener('change', calculateTotals);

            // Sayfa yüklendiğinde de hesapla (edit durumu için)
            calculateTotals();
        });

        // Form validation
        document.querySelector('form').addEventListener('submit', function(e) {
            const startDateTime = new Date(document.getElementById('startDateTime').value);
            const endDateTime = new Date(document.getElementById('endDateTime').value);

            if (endDateTime < startDateTime) {
                e.preventDefault();
                alert('Dönüş tarihi çıkış tarihinden önce olamaz!');
                return false;
            }

            const now = new Date();

            if (startDateTime < now) {
                e.preventDefault();
                alert('Geçmiş tarihli izin talebi oluşturulamaz!');
                return false;
            }
        });
    </script>


    <script>
        // Tarih ve saat değiştiğinde otomatik hesaplama
        document.addEventListener('DOMContentLoaded', function() {
            const startInput = document.querySelector('input[name="StartDateTime"]');
            const endInput = document.querySelector('input[name="EndDateTime"]');
            const dayDisplay = document.querySelector('.toplam-gun-display');
            const hourDisplay = document.querySelector('.toplam-saat-display');

            if (startInput && endInput) {
                startInput.addEventListener('change', calculateLeave);
                endInput.addEventListener('change', calculateLeave);

                // Sayfa yüklendiğinde bir kez hesapla
                calculateLeave();
            }

            function calculateLeave() {
                const startDateTime = new Date(startInput.value);
                const endDateTime = new Date(endInput.value);

                if (startDateTime && endDateTime && endDateTime > startDateTime) {
                    const result = calculateLeaveDaysAndHours(startDateTime, endDateTime);

                    // Ekranda göster
                    if (dayDisplay) {
                        dayDisplay.textContent = result.days + ' gün';
                    }
                    if (hourDisplay) {
                        hourDisplay.textContent = result.hours.toFixed(1) + ' saat';
                    }

                    // Gizli inputlara da yaz (eğer varsa)
                    const totalDaysInput = document.querySelector('input[name="TotalDays"]');
                    const totalHoursInput = document.querySelector('input[name="TotalHours"]');

                    if (totalDaysInput) totalDaysInput.value = result.days;
                    if (totalHoursInput) totalHoursInput.value = result.hours.toFixed(2);
                }
            }

            function calculateLeaveDaysAndHours(startDateTime, endDateTime) {
                let totalHours = 0;

                // Aynı günde mi?
                if (startDateTime.toDateString() === endDateTime.toDateString()) {
                    // Aynı gün içerisinde saat bazlı izin
                    totalHours = (endDateTime - startDateTime) / (1000 * 60 * 60); // millisaniye to saat
                    return {
                        days: 0, // Aynı gün olduğu için 0 gün
                        hours: totalHours
                    };
                } else {
                    // Birden fazla gün
                    let currentDate = new Date(startDateTime);
                    currentDate.setHours(0, 0, 0, 0); // Günün başına set et

                    const endDate = new Date(endDateTime);
                    endDate.setHours(0, 0, 0, 0);

                    while (currentDate < endDate) { // Dönüş günü dahil edilmez
                        if (currentDate.toDateString() === startDateTime.toDateString()) {
                            // İlk gün - başlangıç saatinden 17:30'a kadar
                            const endOfWorkDay = new Date(currentDate);
                            endOfWorkDay.setHours(17, 30, 0, 0);

                            const firstDayHours = Math.max(0, (endOfWorkDay - startDateTime) / (1000 * 60 * 60));
                            totalHours += Math.min(firstDayHours, 9); // Max 9 saat
                        } else {
                            // Ara günler - tam çalışma günü
                            totalHours += 9;
                        }

                        currentDate.setDate(currentDate.getDate() + 1);
                    }

                    // Gün sayısını hesapla (dönüş günü dahil edilmez)
                    const totalDays = Math.max(0, (endDate - new Date(startDateTime.toDateString())) / (1000 * 60 * 60 * 24));

                    return {
                        days: totalDays,
                        hours: totalHours
                    };
                }
            }
        });
    </script>
}